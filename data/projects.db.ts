import { Project } from "../app/features/projectSlice";

export default [
  {
    _id: "1",
    name: "Disney Clone",
    description: `
    This a clone of Disney website that is created using Next framework. The webapp is developed using Typescript. Google Auth with NextAuth from Firebase is used for Authentication. 
    `,
    tags: [
      "Mongodb",
      "RestAPI",
      "NextAuth",
      "GoogleLogin",
      "SSR",
      "Responsive",
    ],
    teches: [
      "Typescript",
      "Next",
      "NextAuth",
      "tailwindcss",
      "Recoil",
      "mongodb",
    ],
    repoLink: "https://github.com/MJ9601/Disney-nextjs-clone",
    demoLink: "",
    img: "./images/disney.png",
    videoSrc: "./videos/disney.mkv",
  },
  {
    _id: "2",
    name: "Netflix clone",
    description: `The idea behind this web app is to be a clone from the Netflix using NEXT framework. To bootstrap the Project create-next-app is used. The Authentication will be handled by Next-auth and whole app is gonna be written in TypeScript.
    `,
    tags: [
      "Mongodb",
      "RestAPI",
      "NextAuth",
      "PasswordlessLogin",
      "SSR",
      "Responsive",
    ],
    teches: [
      "Typescript",
      "Next",
      "Next Auth",
      "Material UI",
      "Styled motion",
      "Recoil",
      "mongodb",
    ],
    repoLink: "https://github.com/MJ9601/netflix-next-clone",
    demoLink:
      "https://netflix-next-clone-oovau4szd-mj9601.vercel.app/subscribe",
    img: "./images/netflix-clone.png",
    videoSrc: "./videos/netflex.mkv",
  },
  {
    _id: "3",
    name: "Tesla clone",
    description: `This web app is multiple page clone of tesla website that is create using reactjs frame work. The state of web app is managed using Redux toolkit.
    `,
    tags: ["Mongodb", "RestAPI", "FirebaseAuthentication", "Responsive"],
    teches: [
      "Javascript",
      "React",
      "Firebase v9",
      "Redux toolkit",
      "Styled components",
      "Material UI",
      "React Router",
    ],
    repoLink: "https://github.com/MJ9601/tesla-react-redux-clone",
    demoLink: "https://tesla-react-redux-clone.web.app/",
    img: "./images/tesla.png",
    videoSrc: "./videos/tesla.mp4",
  },
  {
    _id: "4",
    name: "ChatApp",
    description: `This project is chatroom web app that was created using MERN technologies in javascript. The state of this project is managed using [Redux toolkit]. In this web app client is able to create private chat with other clients, group for shared conversation, and channel for ..

The web app support message as type of file, text, video, and picture. The ower and in group admin of group has the permission to delete or edit the messages. The client also can reply or like a message.
    `,
    tags: ["Mongodb", "RestAPI", "CMS", "Responsive"],
    teches: [
      "Reactjs",
      "Javascript",
      "Styled components",
      "Material UI",
      "axios",
      "React Router",
      "Redux toolkit",
      "Expressjs",
      "monogoose",
      "bcrypt",
    ],
    repoLink: "https://github.com/MJ9601/social-media-app-front-end",
    demoLink: "https://whatsapp-mern-8a487.web.app",
    img: "./images/chatapp.png",
    videoSrc: "./videos/chatapp.mkv",
  },
  {
    _id: "5",
    name: "Linkedin clone",
    description: `This web app linkedin clone that is created using next frame work, and typescript,
    `,
    tags: ["Mongodb", "RestAPI", "GoogleAuthentication", "SSG", "Responsive"],
    teches: [
      "Typescript",
      "Next",
      "Next Auth",
      "Recoil",
      "Mantine UI",
      "tabler-icons-react",
      "heroicons",
      "mongodb",
      "firebase storage",
    ],
    repoLink: "https://github.com/MJ9601/linkedin-next-clone",
    demoLink: "",
    img: "./images/linkedin.png",
    videoSrc: "./videos/linkedin.mkv",
  },
  {
    _id: "6",
    name: "Graphql Ecommerece Webapp",
    description: `This web app is fullstack e-commerce website that backend section is supported using express server with graphql and Apollo server technologies and frontend is supported using Next framework. The project is written in Typescript.

In This project Owner of web app (Admin) is able to login with AccessToken and RefreshToken and create products or update them.

Buyers are able to create an account and login to it using unique email and password. AccessToken and RefreshToken created using jwt ease the login process. Buyers can edit their info or Search for a product or filter products base on product categories.
    `,
    tags: ["Mongodb", "Authentication", "Graphql", "SSR", "Responsive"],
    teches: [
      "Typescript",
      "Express",
      "mongoose",
      "Graphql",
      "typeGraphql",
      "typegoose",
      "lodash",
      "jsonwebtoken",
      "cookie-parser",
      "Apollo-server",
      "Next",
      "Material UI",
      "Apollo-client",
      "tailwindCss",
      "Redux toolkit",
      "mongodb",
    ],
    repoLink: "https://github.com/MJ9601/graphql-e-commerce-webapp",
    demoLink: "",
    img: "./images/netflix-clone.png",
    videoSrc: "./videos/ecommerce.mkv",
  },
  {
    _id: "7",
    name: "Youtube Clone",
    description: `This project is fullstack webapp creating for streaming and video sharing.

The UI of this project was created using Nextjs framework and mantine UI is used to ease the process of creating UI. Axios is used to fetch data from express server.

This project is written by Typescript. user Auth is profromed by Jwt on serverSide (backend) of project
    `,
    tags: ["Mongodb", "RestAPI", "Authentication"],
    teches: [
      "Typescript",
      "Express",
      "mongoose",
      "Typegoose",
      "lodash",
      "jsonwebtoken",
      "cookie-parser",
      "Next",
      "Mantine UI",
      "mongodb",
    ],
    repoLink: "https://github.com/MJ9601/youtube-clone",
    demoLink: "",
    img: "./images/youtube.png",
    videoSrc: "./videos/youtube.mkv",
  },
  {
    _id: "8",
    name: "Medium Clone",
    description: `This webapp is Medium clone that allow owner to create and share post on the blog get comment and like in response. The webapp is created using Next framework using Typescript.
    `,
    tags: ["Sanity", "Graphql", "SGG", "SSR"],
    teches: ["Typescript", "Next", "Material UI", "Styled motion"],
    repoLink: "https://github.com/MJ9601/nextjs-medium-clone",
    demoLink: "https://nextjs-medium-clone-kb8l0h9hb-mj9601.vercel.app/",
    img: "./images/medium.png",
    videoSrc: "./videos/mediam.mkv",
  },
  {
    _id: "9",
    name: "photo Gallery",
    description: ` This simple blog allows the users to share their pictures and read a description about it. The webapp is developed using react and firebase storage and firestore database
    `,
    tags: ["React", "Firebase-v9", "Responsive", "Firebase-storage"],
    teches: [
      "Javascript",
      "React",
      "Firebase",
      "Firestore",
      "Firebase Storage",
    ],
    repoLink: "https://github.com/MJ9601/netflix-next-clone",
    demoLink: "https://photo-gallery-4389f.web.app/",
    img: "./images/photogallery.png",
    videoSrc: "./videos/photogallery.mp4",
  },
  {
    _id: "10",
    name: "Store",
    description: ` A simple store that is using fakeStoreApi as entery data, and user to sign in and a product to thier cart. The webapp is created using nextjs.
    `,
    tags: ["Responsive", "SSR", "SSG", "FirebaseAuth"],
    teches: ["Javascript", "Next", "Firebase", "Mantine UI"],
    repoLink: "https://github.com/MJ9601/mantine-single-page",
    demoLink: "https://mantine-shopping.vercel.app/",
    img: "./images/store.png",
    videoSrc: "./videos/store.mp4",
  },
  {
    _id: "12",
    name: "Slack Clone",
    description: `
    This is a simple clone that allows users to create group and chat with each others. The webapp is created using React framework and firestore database.
    `,
    tags: ["FirebaseAuth", "Firestore"],
    teches: [
      "Javascript",
      "React",
      "React Router",
      "Material UI",
      "Firebase Authentication",
      "Firestore",
    ],
    repoLink: "https://github.com/MJ9601/react-slack-clone",
    demoLink: "https://slack-clone-3ab1a.firebaseapp.com/",
    img: "./images/slack.png",
    videoSrc: "./videos/slack.mkv",
  },
  {
    _id: "13",
    name: "Graphql server",
    description: `This project is a simple graphql server that is created using typegraphql and supported by mongodb database. In this server user can create an account and using uniqe email. In login process user will receive an accessToken which allow him/her to create product. or update his/her product.
    `,
    tags: [
      "Server",
      "Mongodb",
      "Graphql",
      "Typegraphql",
      "Authentication",
      "jwt",
    ],
    teches: [
      "Typescript",
      "Typegoose",
      "apollo-server",
      "argon2",
      "class-validator",
      "lodash",
      "mongoose",
      "type-graphql",
    ],
    repoLink: "https://github.com/MJ9601/graphql-typegraphql-server",
    demoLink: "",
    img: "./images/graphql.png",
    videoSrc: "",
  },
  {
    _id: "14",
    name: "Passwordless Signin",
    description: `This project consists of simple UI with frontend framework Next and restapi backend server (express version 5.0.0 beta). The main focus of this project is on backend server where the client can signin with email and password and server will verify client email through sending mail. In this api client is able to change his/her password through email confirmation. Futhermore, the backend server also provides passwordless signin also through email confirmation. The email confirmation will be handled using nodemailer module. After confirmation of client's mail, his/her account will be verified and sessions will be created for login process. The accessToken and refreshToken will be created using jsonwebtoken and get attached to cookies in response.
    `,
    tags: [
      "Server",
      "Mongodb",
      "RestAPI",
      "PasswordlessSignin",
      "EmailVerification",
      "Authentication",
    ],
    teches: [
      "Typescript",
      "express",
      "mongoose",
      "cookie-parser",
      "cors",
      "nodemailer",
      "zod",
    ],
    repoLink: "https://github.com/MJ9601/rest-api-passwordless-signin",
    demoLink: "",
    img: "./images/restapi.png",
    videoSrc: "",
  },
  {
    _id: "15",
    name: "Custom Google auth2",
    description: `This project handles google oauth2 signin process through the frontend framework (Next) and backend server (express). The returning data from google.oauth2.googleapis will be stored in mongodb database, then backend server creates a session for user and send back an accessToken and a refreshToken within response headers as cookies. The above process allows SSR to render userInfo and perform his/her loggin process on the client's next visits.
    `,
    tags: [
      "Server",
      "Mongodb",
      "RestAPI",
      "GoogleAuth2",
      "EmailVerification",
      "Authentication",
    ],
    teches: ["Typescript", "express", "mongoose", "cookie-parser", "cors"],
    repoLink: "https://github.com/MJ9601/google-oauth-server",
    demoLink: "",
    img: "./images/restapi.png",
    videoSrc: "",
  },
  {
    _id: "16",
    name: "Rest api server",
    description: `This project is restapi which is created using express and mongoose. The code is written in typescript. The Models and middleware are handled by zod module. This server is able to create a user, authenticate him/her, allow creating, update, and delete a product.
    `,
    tags: ["Server", "Mongodb", "RestAPI", "Jsonwebtoken", "Authentication"],
    teches: [
      "Typescript",
      "express",
      "mongoose",
      "cookie-parser",
      "cors",
      "bcript",
      "zod",
    ],
    repoLink: "https://github.com/MJ9601/rest-api-mongoose-ts",
    demoLink: "",
    img: "./images/restapi.png",
    videoSrc: "",
  },
  {
    _id: "17",
    name: "3D/2D portfolio",
    description: `
    This portfolio website is created with Next framework using Typescript. Webgl technology and Threejs is used for 3D section. 2D section is created for small screens and device with low internet speed. The base on 3D model is built in Blender software then imported to react-three-fiber using react-three-drei. The redux toolkit is used as CMS.
    `,
    tags: ["3D/2D", "Threejs", "Webgl", "responsive", "Blender"],
    teches: [
      "Typescript",
      "Next",
      "Redux toolkit",
      "Blender",
      "Three",
      "react-three-fiber",
      "react-three-drei",
    ],
    repoLink: "https://github.com/MJ9601/my-portfolio",
    demoLink: "",
    img: "./images/portfolio.png",
    videoSrc: "",
  },
] as Project[];
